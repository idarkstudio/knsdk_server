//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1312 // Variable names should begin with lower-case letter
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Resolvers
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public class GeneratedResolver_Entangle : global::MessagePack.IFormatterResolver
//    {
//        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver_Entangle();

//        private GeneratedResolver_Entangle()
//        {
//        }

//        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
//        {
//            return FormatterCache<T>.Formatter;
//        }

//        private static class FormatterCache<T>
//        {
//            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

//            static FormatterCache()
//            {
//                var f = GeneratedResolverGetFormatterHelperEntangle.GetFormatter(typeof(T));
//                if (f != null)
//                {
//                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
//                }
//            }
//        }
//    }

//    internal static class GeneratedResolverGetFormatterHelperEntangle
//    {
//        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

//        static GeneratedResolverGetFormatterHelperEntangle()
//        {
//            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(26)
//            {
//                { typeof(global::System.Collections.Generic.Dictionary<byte, object>), 0 },
//                { typeof(global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>), 1 },
//                { typeof(global::System.Collections.Generic.List<global::Entangle.ENStateFrame>), 2 },
//                { typeof(global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>), 3 },
//                { typeof(global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>), 4 },
//                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>>), 5 },
//                { typeof(global::FigNetCommon.EntityType), 6 },
//                { typeof(global::FigNetCommon.IFNProperty), 7 },
//                { typeof(global::FigNetCommon.Data.OperationData), 8 },
//                { typeof(global::FigNet.Entangle.EntangleState), 9 },
//                { typeof(global::Entangle.ENStateFrame), 10 },
//                { typeof(global::Entangle.ENStateFrameBatch), 11 },
//                { typeof(global::FigNetCommon.RoomInfo), 12 },
//                { typeof(global::FigNetCommon.RoomList), 13 },
//                { typeof(global::FigNetCommon.EntityDefaultState), 14 },
//                { typeof(global::FigNetCommon.RoomEventData), 15 },
//                { typeof(global::FigNetCommon.FNShort), 16 },
//                { typeof(global::FigNetCommon.FNInt), 17 },
//                { typeof(global::FigNetCommon.FNFloat), 18 },
//                { typeof(global::FigNetCommon.FNString), 19 },
//                { typeof(global::FigNetCommon.FNVec4), 20 },
//                { typeof(global::FigNetCommon.FNVector4), 21 },
//                { typeof(global::FigNetCommon.FNVec3), 22 },
//                { typeof(global::FigNetCommon.FNVector3), 23 },
//                { typeof(global::FigNetCommon.FNVec2), 24 },
//                { typeof(global::FigNetCommon.FNVector2), 25 },
//            };
//        }

//        internal static object GetFormatter(Type t)
//        {
//            int key;
//            if (!lookup.TryGetValue(t, out key))
//            {
//                return null;
//            }

//            switch (key)
//            {
//                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<byte, object>();
//                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<ushort, global::FigNetCommon.IFNProperty>();
//                case 2: return new global::MessagePack.Formatters.ListFormatter<global::Entangle.ENStateFrame>();
//                case 3: return new global::MessagePack.Formatters.ListFormatter<global::FigNetCommon.RoomInfo>();
//                case 4: return new global::MessagePack.Formatters.KeyValuePairFormatter<byte, global::FigNet.Entangle.EntangleState>();
//                case 5: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>>();
//                case 6: return new MessagePack.Formatters.FigNetCommon.EntityTypeFormatter();
//                case 7: return new MessagePack.Formatters.FigNetCommon.IFNPropertyFormatter();
//                case 8: return new MessagePack.Formatters.FigNetCommon.Data.OperationDataFormatter();
//                case 9: return new MessagePack.Formatters.FigNet.Entangle.EntangleStateFormatter();
//                case 10: return new MessagePack.Formatters.Entangle.ENStateFrameFormatter();
//                case 11: return new MessagePack.Formatters.Entangle.ENStateFrameBatchFormatter();
//                case 12: return new MessagePack.Formatters.FigNetCommon.RoomInfoFormatter();
//                case 13: return new MessagePack.Formatters.FigNetCommon.RoomListFormatter();
//                case 14: return new MessagePack.Formatters.FigNetCommon.EntityDefaultStateFormatter();
//                case 15: return new MessagePack.Formatters.FigNetCommon.RoomEventDataFormatter();
//                case 16: return new MessagePack.Formatters.FigNetCommon.FNShortFormatter();
//                case 17: return new MessagePack.Formatters.FigNetCommon.FNIntFormatter();
//                case 18: return new MessagePack.Formatters.FigNetCommon.FNFloatFormatter();
//                case 19: return new MessagePack.Formatters.FigNetCommon.FNStringFormatter();
//                case 20: return new MessagePack.Formatters.FigNetCommon.FNVec4Formatter();
//                case 21: return new MessagePack.Formatters.FigNetCommon.FNVector4Formatter();
//                case 22: return new MessagePack.Formatters.FigNetCommon.FNVec3Formatter();
//                case 23: return new MessagePack.Formatters.FigNetCommon.FNVector3Formatter();
//                case 24: return new MessagePack.Formatters.FigNetCommon.FNVec2Formatter();
//                case 25: return new MessagePack.Formatters.FigNetCommon.FNVector2Formatter();
//                default: return null;
//            }
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1312 // Variable names should begin with lower-case letter
//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1649 // File name should match first type name


//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.FigNetCommon
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public sealed class EntityTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.EntityType>
//    {
//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.EntityType value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            writer.Write((Byte)value);
//        }

//        public global::FigNetCommon.EntityType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            return (global::FigNetCommon.EntityType)reader.ReadByte();
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name


//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.FigNetCommon
//{
//    using System;
//    using System.Buffers;
//    using System.Collections.Generic;
//    using MessagePack;

//    public sealed class IFNPropertyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.IFNProperty>
//    {
//        private readonly Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>> typeToKeyAndJumpMap;
//        private readonly Dictionary<int, int> keyToJumpMap;

//        public IFNPropertyFormatter()
//        {
//            this.typeToKeyAndJumpMap = new Dictionary<RuntimeTypeHandle, KeyValuePair<int, int>>(7, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
//            {
//                { typeof(global::FigNetCommon.FNVector3).TypeHandle, new KeyValuePair<int, int>(0, 0) },
//                { typeof(global::FigNetCommon.FNVector2).TypeHandle, new KeyValuePair<int, int>(1, 1) },
//                { typeof(global::FigNetCommon.FNVector4).TypeHandle, new KeyValuePair<int, int>(2, 2) },
//                { typeof(global::FigNetCommon.FNFloat).TypeHandle, new KeyValuePair<int, int>(3, 3) },
//                { typeof(global::FigNetCommon.FNInt).TypeHandle, new KeyValuePair<int, int>(4, 4) },
//                { typeof(global::FigNetCommon.FNShort).TypeHandle, new KeyValuePair<int, int>(5, 5) },
//                { typeof(global::FigNetCommon.FNString).TypeHandle, new KeyValuePair<int, int>(6, 6) },
//            };
//            this.keyToJumpMap = new Dictionary<int, int>(7)
//            {
//                { 0, 0 },
//                { 1, 1 },
//                { 2, 2 },
//                { 3, 3 },
//                { 4, 4 },
//                { 5, 5 },
//                { 6, 6 },
//            };
//        }

//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.IFNProperty value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            KeyValuePair<int, int> keyValuePair;
//            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
//            {
//                writer.WriteArrayHeader(2);
//                writer.WriteInt32(keyValuePair.Key);
//                switch (keyValuePair.Value)
//                {
//                    case 0:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector3>().Serialize(ref writer, (global::FigNetCommon.FNVector3)value, options);
//                        break;
//                    case 1:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector2>().Serialize(ref writer, (global::FigNetCommon.FNVector2)value, options);
//                        break;
//                    case 2:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector4>().Serialize(ref writer, (global::FigNetCommon.FNVector4)value, options);
//                        break;
//                    case 3:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNFloat>().Serialize(ref writer, (global::FigNetCommon.FNFloat)value, options);
//                        break;
//                    case 4:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNInt>().Serialize(ref writer, (global::FigNetCommon.FNInt)value, options);
//                        break;
//                    case 5:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNShort>().Serialize(ref writer, (global::FigNetCommon.FNShort)value, options);
//                        break;
//                    case 6:
//                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNString>().Serialize(ref writer, (global::FigNetCommon.FNString)value, options);
//                        break;
//                    default:
//                        break;
//                }

//                return;
//            }

//            writer.WriteNil();
//        }

//        public global::FigNetCommon.IFNProperty Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            if (reader.ReadArrayHeader() != 2)
//            {
//                throw new InvalidOperationException("Invalid Union data was detected. Type:global::FigNetCommon.IFNProperty");
//            }

//            var key = reader.ReadInt32();

//            if (!this.keyToJumpMap.TryGetValue(key, out key))
//            {
//                key = -1;
//            }

//            global::FigNetCommon.IFNProperty result = null;
//            switch (key)
//            {
//                case 0:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector3>().Deserialize(ref reader, options);
//                    break;
//                case 1:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector2>().Deserialize(ref reader, options);
//                    break;
//                case 2:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector4>().Deserialize(ref reader, options);
//                    break;
//                case 3:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNFloat>().Deserialize(ref reader, options);
//                    break;
//                case 4:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNInt>().Deserialize(ref reader, options);
//                    break;
//                case 5:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNShort>().Deserialize(ref reader, options);
//                    break;
//                case 6:
//                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNString>().Deserialize(ref reader, options);
//                    break;
//                default:
//                    reader.Skip();
//                    break;
//            }

//            return result;
//        }
//    }


//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name


//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1129 // Do not use default value type constructor
//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1309 // Field names should not begin with underscore
//#pragma warning disable SA1312 // Variable names should begin with lower-case letter
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.FigNetCommon.Data
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public sealed class OperationDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.Data.OperationData>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.Data.OperationData value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>().Serialize(ref writer, value.parameters, options);
//        }

//        public global::FigNetCommon.Data.OperationData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __parameters__ = default(global::System.Collections.Generic.Dictionary<byte, object>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __parameters__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.Data.OperationData(__parameters__);
//            return ____result;
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1129 // Do not use default value type constructor
//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1309 // Field names should not begin with underscore
//#pragma warning restore SA1312 // Variable names should begin with lower-case letter
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name

//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1129 // Do not use default value type constructor
//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1309 // Field names should not begin with underscore
//#pragma warning disable SA1312 // Variable names should begin with lower-case letter
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.FigNet.Entangle
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public sealed class EntangleStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNet.Entangle.EntangleState>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNet.Entangle.EntangleState value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(2);
//            writer.Write(value.DeliveryMethod);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>>().Serialize(ref writer, value.Properties, options);
//        }

//        public global::FigNet.Entangle.EntangleState Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __DeliveryMethod__ = default(int);
//            var __Properties__ = default(global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __DeliveryMethod__ = reader.ReadInt32();
//                        break;
//                    case 1:
//                        __Properties__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNet.Entangle.EntangleState();
//            ____result.DeliveryMethod = __DeliveryMethod__;
//            ____result.Properties = __Properties__;
//            return ____result;
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1129 // Do not use default value type constructor
//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1309 // Field names should not begin with underscore
//#pragma warning restore SA1312 // Variable names should begin with lower-case letter
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name

//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1129 // Do not use default value type constructor
//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1309 // Field names should not begin with underscore
//#pragma warning disable SA1312 // Variable names should begin with lower-case letter
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.Entangle
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public sealed class ENStateFrameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Entangle.ENStateFrame>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::Entangle.ENStateFrame value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(2);
//            writer.Write(value.NetworkEntityId);
//            formatterResolver.GetFormatterWithVerify<global::FigNet.Entangle.EntangleState>().Serialize(ref writer, value.State, options);
//        }

//        public global::Entangle.ENStateFrame Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __NetworkEntityId__ = default(uint);
//            var __State__ = default(global::FigNet.Entangle.EntangleState);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __NetworkEntityId__ = reader.ReadUInt32();
//                        break;
//                    case 1:
//                        __State__ = formatterResolver.GetFormatterWithVerify<global::FigNet.Entangle.EntangleState>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::Entangle.ENStateFrame();
//            ____result.NetworkEntityId = __NetworkEntityId__;
//            ____result.State = __State__;
//            return ____result;
//        }
//    }

//    public sealed class ENStateFrameBatchFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Entangle.ENStateFrameBatch>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::Entangle.ENStateFrameBatch value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(2);
//            formatterResolver.GetFormatterWithVerify<global::FigNetCommon.EntityType>().Serialize(ref writer, value.EntityType, options);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Entangle.ENStateFrame>>().Serialize(ref writer, value.ENStateFrames, options);
//        }

//        public global::Entangle.ENStateFrameBatch Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __EntityType__ = default(global::FigNetCommon.EntityType);
//            var __ENStateFrames__ = default(global::System.Collections.Generic.List<global::Entangle.ENStateFrame>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __EntityType__ = formatterResolver.GetFormatterWithVerify<global::FigNetCommon.EntityType>().Deserialize(ref reader, options);
//                        break;
//                    case 1:
//                        __ENStateFrames__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::Entangle.ENStateFrame>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::Entangle.ENStateFrameBatch();
//            ____result.EntityType = __EntityType__;
//            ____result.ENStateFrames = __ENStateFrames__;
//            return ____result;
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1129 // Do not use default value type constructor
//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1309 // Field names should not begin with underscore
//#pragma warning restore SA1312 // Variable names should begin with lower-case letter
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name

//// <auto-generated>
//// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
//// </auto-generated>

//#pragma warning disable 618
//#pragma warning disable 612
//#pragma warning disable 414
//#pragma warning disable 168

//#pragma warning disable SA1129 // Do not use default value type constructor
//#pragma warning disable SA1200 // Using directives should be placed correctly
//#pragma warning disable SA1309 // Field names should not begin with underscore
//#pragma warning disable SA1312 // Variable names should begin with lower-case letter
//#pragma warning disable SA1403 // File may only contain a single namespace
//#pragma warning disable SA1649 // File name should match first type name

//namespace MessagePack.Formatters.FigNetCommon
//{
//    using System;
//    using System.Buffers;
//    using MessagePack;

//    public sealed class RoomInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomInfo>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.RoomInfo value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(5);
//            writer.Write(value.Id);
//            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
//            writer.Write(value.MaxPlayer);
//            writer.Write(value.ActivePlayer);
//            writer.Write(value.State);
//        }

//        public global::FigNetCommon.RoomInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Id__ = default(uint);
//            var __RoomName__ = default(string);
//            var __MaxPlayer__ = default(int);
//            var __ActivePlayer__ = default(int);
//            var __State__ = default(int);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Id__ = reader.ReadUInt32();
//                        break;
//                    case 1:
//                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
//                        break;
//                    case 2:
//                        __MaxPlayer__ = reader.ReadInt32();
//                        break;
//                    case 3:
//                        __ActivePlayer__ = reader.ReadInt32();
//                        break;
//                    case 4:
//                        __State__ = reader.ReadInt32();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.RoomInfo();
//            ____result.Id = __Id__;
//            ____result.RoomName = __RoomName__;
//            ____result.MaxPlayer = __MaxPlayer__;
//            ____result.ActivePlayer = __ActivePlayer__;
//            ____result.State = __State__;
//            return ____result;
//        }
//    }

//    public sealed class RoomListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomList>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.RoomList value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>>().Serialize(ref writer, value.Rooms, options);
//        }

//        public global::FigNetCommon.RoomList Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Rooms__ = default(global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Rooms__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.RoomList();
//            ____result.Rooms = __Rooms__;
//            return ____result;
//        }
//    }

//    public sealed class EntityDefaultStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.EntityDefaultState>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.EntityDefaultState value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>>>().Serialize(ref writer, value.states, options);
//        }

//        public global::FigNetCommon.EntityDefaultState Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __states__ = default(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __states__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.Entangle.EntangleState>>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.EntityDefaultState();
//            ____result.states = __states__;
//            return ____result;
//        }
//    }

//    public sealed class RoomEventDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomEventData>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.RoomEventData value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(2);
//            writer.Write(value.EventCode);
//            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>().Serialize(ref writer, value.Data, options);
//        }

//        public global::FigNetCommon.RoomEventData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __EventCode__ = default(ushort);
//            var __Data__ = default(global::System.Collections.Generic.Dictionary<byte, object>);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __EventCode__ = reader.ReadUInt16();
//                        break;
//                    case 1:
//                        __Data__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.RoomEventData();
//            ____result.EventCode = __EventCode__;
//            ____result.Data = __Data__;
//            return ____result;
//        }
//    }

//    public sealed class FNShortFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNShort>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNShort value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            writer.Write(value.Value);
//        }

//        public global::FigNetCommon.FNShort Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(short);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = reader.ReadInt16();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNShort();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNIntFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNInt>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNInt value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            writer.Write(value.Value);
//        }

//        public global::FigNetCommon.FNInt Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(int);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = reader.ReadInt32();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNInt();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNFloatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNFloat>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNFloat value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            writer.Write(value.Value);
//        }

//        public global::FigNetCommon.FNFloat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(float);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = reader.ReadSingle();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNFloat();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNStringFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNString>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNString value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Value, options);
//        }

//        public global::FigNetCommon.FNString Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(string);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNString();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNVec4Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec4>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVec4 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(4);
//            writer.Write(value.__X__);
//            writer.Write(value.__Y__);
//            writer.Write(value.__Z__);
//            writer.Write(value.__W__);
//        }

//        public global::FigNetCommon.FNVec4 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var ____X____ = default(int);
//            var ____Y____ = default(int);
//            var ____Z____ = default(int);
//            var ____W____ = default(int);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        ____X____ = reader.ReadInt32();
//                        break;
//                    case 1:
//                        ____Y____ = reader.ReadInt32();
//                        break;
//                    case 2:
//                        ____Z____ = reader.ReadInt32();
//                        break;
//                    case 3:
//                        ____W____ = reader.ReadInt32();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVec4();
//            ____result.__X__ = ____X____;
//            ____result.__Y__ = ____Y____;
//            ____result.__Z__ = ____Z____;
//            ____result.__W__ = ____W____;
//            return ____result;
//        }
//    }

//    public sealed class FNVector4Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector4>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVector4 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec4>().Serialize(ref writer, value.Value, options);
//        }

//        public global::FigNetCommon.FNVector4 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(global::FigNetCommon.FNVec4);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec4>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVector4();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNVec3Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec3>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVec3 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(3);
//            writer.Write(value.__X__);
//            writer.Write(value.__Y__);
//            writer.Write(value.__Z__);
//        }

//        public global::FigNetCommon.FNVec3 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var ____X____ = default(int);
//            var ____Y____ = default(int);
//            var ____Z____ = default(int);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        ____X____ = reader.ReadInt32();
//                        break;
//                    case 1:
//                        ____Y____ = reader.ReadInt32();
//                        break;
//                    case 2:
//                        ____Z____ = reader.ReadInt32();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVec3();
//            ____result.__X__ = ____X____;
//            ____result.__Y__ = ____Y____;
//            ____result.__Z__ = ____Z____;
//            return ____result;
//        }
//    }

//    public sealed class FNVector3Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector3>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVector3 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec3>().Serialize(ref writer, value.Value, options);
//        }

//        public global::FigNetCommon.FNVector3 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(global::FigNetCommon.FNVec3);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec3>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVector3();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }

//    public sealed class FNVec2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec2>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVec2 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(2);
//            writer.Write(value.__X__);
//            writer.Write(value.__Y__);
//        }

//        public global::FigNetCommon.FNVec2 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var ____X____ = default(int);
//            var ____Y____ = default(int);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        ____X____ = reader.ReadInt32();
//                        break;
//                    case 1:
//                        ____Y____ = reader.ReadInt32();
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVec2();
//            ____result.__X__ = ____X____;
//            ____result.__Y__ = ____Y____;
//            return ____result;
//        }
//    }

//    public sealed class FNVector2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector2>
//    {


//        public void Serialize(ref MessagePackWriter writer, global::FigNetCommon.FNVector2 value, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (value == null)
//            {
//                writer.WriteNil();
//                return;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            writer.WriteArrayHeader(1);
//            formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec2>().Serialize(ref writer, value.Value, options);
//        }

//        public global::FigNetCommon.FNVector2 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
//        {
//            if (reader.TryReadNil())
//            {
//                return null;
//            }

//            IFormatterResolver formatterResolver = options.Resolver;
//            var length = reader.ReadArrayHeader();
//            var __Value__ = default(global::FigNetCommon.FNVec2);

//            for (int i = 0; i < length; i++)
//            {
//                var key = i;

//                switch (key)
//                {
//                    case 0:
//                        __Value__ = formatterResolver.GetFormatterWithVerify<global::FigNetCommon.FNVec2>().Deserialize(ref reader, options);
//                        break;
//                    default:
//                        reader.Skip();
//                        break;
//                }
//            }

//            var ____result = new global::FigNetCommon.FNVector2();
//            ____result.Value = __Value__;
//            return ____result;
//        }
//    }
//}

//#pragma warning restore 168
//#pragma warning restore 414
//#pragma warning restore 618
//#pragma warning restore 612

//#pragma warning restore SA1129 // Do not use default value type constructor
//#pragma warning restore SA1200 // Using directives should be placed correctly
//#pragma warning restore SA1309 // Field names should not begin with underscore
//#pragma warning restore SA1312 // Variable names should begin with lower-case letter
//#pragma warning restore SA1403 // File may only contain a single namespace
//#pragma warning restore SA1649 // File name should match first type name

