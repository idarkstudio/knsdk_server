// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(26)
            {
                { typeof(global::System.Collections.Generic.Dictionary<byte, object>), 0 },
                { typeof(global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>), 1 },
                { typeof(global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.KernNetz.EntangleState>), 2 },
                { typeof(global::System.Collections.Generic.List<global::KernNetz.ENStateFrame>), 3 },
                { typeof(global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>), 4 },
                { typeof(global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.KernNetz.EntangleState>>), 5 },
                { typeof(global::FigNetCommon.EntityType), 6 },
                { typeof(global::FigNetCommon.IFNProperty), 7 },
                { typeof(global::KernNetz.ENStateFrame), 8 },
                { typeof(global::KernNetz.ENStateFrameBatch), 9 },
                { typeof(global::FigNet.KernNetz.EntangleState), 10 },
                { typeof(global::FigNetCommon.Data.OperationData), 11 },
                { typeof(global::FigNetCommon.EntityDefaultState), 12 },
                { typeof(global::FigNetCommon.FNFloat), 13 },
                { typeof(global::FigNetCommon.FNInt), 14 },
                { typeof(global::FigNetCommon.FNShort), 15 },
                { typeof(global::FigNetCommon.FNString), 16 },
                { typeof(global::FigNetCommon.FNVec2), 17 },
                { typeof(global::FigNetCommon.FNVec3), 18 },
                { typeof(global::FigNetCommon.FNVec4), 19 },
                { typeof(global::FigNetCommon.FNVector2), 20 },
                { typeof(global::FigNetCommon.FNVector3), 21 },
                { typeof(global::FigNetCommon.FNVector4), 22 },
                { typeof(global::FigNetCommon.RoomEventData), 23 },
                { typeof(global::FigNetCommon.RoomInfo), 24 },
                { typeof(global::FigNetCommon.RoomList), 25 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<byte, object>();
                case 1: return new global::MessagePack.Formatters.DictionaryFormatter<ushort, global::FigNetCommon.IFNProperty>();
                case 2: return new global::MessagePack.Formatters.KeyValuePairFormatter<byte, global::FigNet.KernNetz.EntangleState>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::KernNetz.ENStateFrame>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::FigNetCommon.RoomInfo>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.KernNetz.EntangleState>>();
                case 6: return new MessagePack.Formatters.FigNetCommon.EntityTypeFormatter();
                case 7: return new MessagePack.Formatters.FigNetCommon.IFNPropertyFormatter();
                case 8: return new MessagePack.Formatters.Entangle.ENStateFrameFormatter();
                case 9: return new MessagePack.Formatters.Entangle.ENStateFrameBatchFormatter();
                case 10: return new MessagePack.Formatters.FigNet.Entangle.EntangleStateFormatter();
                case 11: return new MessagePack.Formatters.FigNetCommon.Data.OperationDataFormatter();
                case 12: return new MessagePack.Formatters.FigNetCommon.EntityDefaultStateFormatter();
                case 13: return new MessagePack.Formatters.FigNetCommon.FNFloatFormatter();
                case 14: return new MessagePack.Formatters.FigNetCommon.FNIntFormatter();
                case 15: return new MessagePack.Formatters.FigNetCommon.FNShortFormatter();
                case 16: return new MessagePack.Formatters.FigNetCommon.FNStringFormatter();
                case 17: return new MessagePack.Formatters.FigNetCommon.FNVec2Formatter();
                case 18: return new MessagePack.Formatters.FigNetCommon.FNVec3Formatter();
                case 19: return new MessagePack.Formatters.FigNetCommon.FNVec4Formatter();
                case 20: return new MessagePack.Formatters.FigNetCommon.FNVector2Formatter();
                case 21: return new MessagePack.Formatters.FigNetCommon.FNVector3Formatter();
                case 22: return new MessagePack.Formatters.FigNetCommon.FNVector4Formatter();
                case 23: return new MessagePack.Formatters.FigNetCommon.RoomEventDataFormatter();
                case 24: return new MessagePack.Formatters.FigNetCommon.RoomInfoFormatter();
                case 25: return new MessagePack.Formatters.FigNetCommon.RoomListFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.FigNetCommon
{

    public sealed class EntityTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.EntityType>
    {
        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.EntityType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((global::System.Byte)value);
        }

        public global::FigNetCommon.EntityType Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::FigNetCommon.EntityType)reader.ReadByte();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.FigNetCommon
{
    public sealed class IFNPropertyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.IFNProperty>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IFNPropertyFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(7, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::FigNetCommon.FNVector3).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::FigNetCommon.FNVector2).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::FigNetCommon.FNVector4).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::FigNetCommon.FNFloat).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::FigNetCommon.FNInt).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::FigNetCommon.FNShort).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
                { typeof(global::FigNetCommon.FNString).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(6, 6) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(7)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
                { 6, 6 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.IFNProperty value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector3>().Serialize(ref writer, (global::FigNetCommon.FNVector3)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector2>().Serialize(ref writer, (global::FigNetCommon.FNVector2)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector4>().Serialize(ref writer, (global::FigNetCommon.FNVector4)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNFloat>().Serialize(ref writer, (global::FigNetCommon.FNFloat)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNInt>().Serialize(ref writer, (global::FigNetCommon.FNInt)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNShort>().Serialize(ref writer, (global::FigNetCommon.FNShort)value, options);
                        break;
                    case 6:
                        options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNString>().Serialize(ref writer, (global::FigNetCommon.FNString)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::FigNetCommon.IFNProperty Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::FigNetCommon.IFNProperty");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::FigNetCommon.IFNProperty result = null;
            switch (key)
            {
                case 0:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector3>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector2>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNVector4>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNFloat>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNInt>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNShort>().Deserialize(ref reader, options);
                    break;
                case 6:
                    result = (global::FigNetCommon.IFNProperty)options.Resolver.GetFormatterWithVerify<global::FigNetCommon.FNString>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Entangle
{
    public sealed class ENStateFrameFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::KernNetz.ENStateFrame>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::KernNetz.ENStateFrame value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.NetworkEntityId);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNet.KernNetz.EntangleState>(formatterResolver).Serialize(ref writer, value.State, options);
        }

        public global::KernNetz.ENStateFrame Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::KernNetz.ENStateFrame();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.NetworkEntityId = reader.ReadUInt32();
                        break;
                    case 1:
                        ____result.State = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNet.KernNetz.EntangleState>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ENStateFrameBatchFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::KernNetz.ENStateFrameBatch>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::KernNetz.ENStateFrameBatch value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.EntityType>(formatterResolver).Serialize(ref writer, value.EntityType, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::KernNetz.ENStateFrame>>(formatterResolver).Serialize(ref writer, value.ENStateFrames, options);
        }

        public global::KernNetz.ENStateFrameBatch Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::KernNetz.ENStateFrameBatch();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.EntityType = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.EntityType>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.ENStateFrames = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::KernNetz.ENStateFrame>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.FigNet.Entangle
{
    public sealed class EntangleStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNet.KernNetz.EntangleState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNet.KernNetz.EntangleState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.DeliveryMethod);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>>(formatterResolver).Serialize(ref writer, value.Properties, options);
        }

        public global::FigNet.KernNetz.EntangleState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNet.KernNetz.EntangleState();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.DeliveryMethod = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Properties = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<ushort, global::FigNetCommon.IFNProperty>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.FigNetCommon.Data
{
    public sealed class OperationDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.Data.OperationData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.Data.OperationData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>(formatterResolver).Serialize(ref writer, value.parameters, options);
        }

        public global::FigNetCommon.Data.OperationData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __parameters__ = default(global::System.Collections.Generic.Dictionary<byte, object>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __parameters__ = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::FigNetCommon.Data.OperationData(__parameters__);
            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.FigNetCommon
{
    public sealed class EntityDefaultStateFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.EntityDefaultState>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.EntityDefaultState value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.KernNetz.EntangleState>>>(formatterResolver).Serialize(ref writer, value.states, options);
        }

        public global::FigNetCommon.EntityDefaultState Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.EntityDefaultState();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.states = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<byte, global::FigNet.KernNetz.EntangleState>>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNFloatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNFloat>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNFloat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Value);
        }

        public global::FigNetCommon.FNFloat Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNFloat();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNIntFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNInt>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNInt value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Value);
        }

        public global::FigNetCommon.FNInt Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNInt();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNPropertyFormatter<T> : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNProperty<T>>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNProperty<T> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<T>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::FigNetCommon.FNProperty<T> Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNProperty<T>();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<T>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNShortFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNShort>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNShort value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Value);
        }

        public global::FigNetCommon.FNShort Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNShort();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = reader.ReadInt16();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNStringFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNString>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNString value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::FigNetCommon.FNString Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNString();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVec2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec2>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVec2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(2);
            writer.Write(value.__X__);
            writer.Write(value.__Y__);
        }

        public global::FigNetCommon.FNVec2 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVec2();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.__X__ = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.__Y__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVec3Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec3>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVec3 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(3);
            writer.Write(value.__X__);
            writer.Write(value.__Y__);
            writer.Write(value.__Z__);
        }

        public global::FigNetCommon.FNVec3 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVec3();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.__X__ = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.__Y__ = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.__Z__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVec4Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVec4>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVec4 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(4);
            writer.Write(value.__X__);
            writer.Write(value.__Y__);
            writer.Write(value.__Z__);
            writer.Write(value.__W__);
        }

        public global::FigNetCommon.FNVec4 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVec4();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.__X__ = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.__Y__ = reader.ReadInt32();
                        break;
                    case 2:
                        ____result.__Z__ = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.__W__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVector2Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector2>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVector2 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec2>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::FigNetCommon.FNVector2 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVector2();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec2>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVector3Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector3>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVector3 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec3>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::FigNetCommon.FNVector3 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVector3();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec3>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class FNVector4Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.FNVector4>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.FNVector4 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec4>(formatterResolver).Serialize(ref writer, value.Value, options);
        }

        public global::FigNetCommon.FNVector4 Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.FNVector4();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Value = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::FigNetCommon.FNVec4>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomEventDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomEventData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.RoomEventData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.EventCode);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>(formatterResolver).Serialize(ref writer, value.Data, options);
        }

        public global::FigNetCommon.RoomEventData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.RoomEventData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.EventCode = reader.ReadUInt16();
                        break;
                    case 1:
                        ____result.Data = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<byte, object>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomInfo>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.RoomInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.Id);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.RoomName, options);
            writer.Write(value.MaxPlayer);
            writer.Write(value.ActivePlayer);
            writer.Write(value.State);
        }

        public global::FigNetCommon.RoomInfo Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.RoomInfo();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadUInt32();
                        break;
                    case 1:
                        ____result.RoomName = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.MaxPlayer = reader.ReadInt32();
                        break;
                    case 3:
                        ____result.ActivePlayer = reader.ReadInt32();
                        break;
                    case 4:
                        ____result.State = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomListFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::FigNetCommon.RoomList>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::FigNetCommon.RoomList value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>>(formatterResolver).Serialize(ref writer, value.Rooms, options);
        }

        public global::FigNetCommon.RoomList Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::FigNetCommon.RoomList();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Rooms = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::System.Collections.Generic.List<global::FigNetCommon.RoomInfo>>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

